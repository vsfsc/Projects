//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace WorksShowDll
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class VAExtensionEntities : DbContext
    {
        public VAExtensionEntities()
            : base("name=VAExtensionEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<FileType> FileType { get; set; }
        public virtual DbSet<Works> Works { get; set; }
        public virtual DbSet<WorksFile> WorksFile { get; set; }
        public virtual DbSet<WorksType> WorksType { get; set; }
        public virtual DbSet<CSMyWorks> CSMyWorks { get; set; }
        public virtual DbSet<Course> Course { get; set; }
        public virtual DbSet<Favorites> Favorites { get; set; }
        public virtual DbSet<Periods> Periods { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<UserWorks> UserWorks { get; set; }
        public virtual DbSet<FavoriteWorks> FavoriteWorks { get; set; }
    
        public virtual ObjectResult<GetUserByUserID_Result> GetUserByUserID(Nullable<long> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserByUserID_Result>("GetUserByUserID", userIDParameter);
        }
    
        public virtual ObjectResult<GetUserByWorksID_Result> GetUserByWorksID(Nullable<long> worksID)
        {
            var worksIDParameter = worksID.HasValue ?
                new ObjectParameter("WorksID", worksID) :
                new ObjectParameter("WorksID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserByWorksID_Result>("GetUserByWorksID", worksIDParameter);
        }
    
        public virtual ObjectResult<GetUserIdWorksIdByPeriodId_Result> GetUserIdWorksIdByPeriodId(Nullable<long> periodID)
        {
            var periodIDParameter = periodID.HasValue ?
                new ObjectParameter("PeriodID", periodID) :
                new ObjectParameter("PeriodID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserIdWorksIdByPeriodId_Result>("GetUserIdWorksIdByPeriodId", periodIDParameter);
        }
    
        public virtual ObjectResult<GetUserRoleByUserID_Result> GetUserRoleByUserID(Nullable<long> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserRoleByUserID_Result>("GetUserRoleByUserID", userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> GetUsersIDByPeriodID(Nullable<long> periodID)
        {
            var periodIDParameter = periodID.HasValue ?
                new ObjectParameter("PeriodID", periodID) :
                new ObjectParameter("PeriodID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("GetUsersIDByPeriodID", periodIDParameter);
        }
    
        public virtual ObjectResult<GetWorksAllotTimesByWorsID_Result> GetWorksAllotTimesByWorsID(Nullable<long> worksID)
        {
            var worksIDParameter = worksID.HasValue ?
                new ObjectParameter("WorksID", worksID) :
                new ObjectParameter("WorksID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorksAllotTimesByWorsID_Result>("GetWorksAllotTimesByWorsID", worksIDParameter);
        }
    
        public virtual ObjectResult<GetWorksByAccount_Result> GetWorksByAccount(Nullable<long> periodID, string account)
        {
            var periodIDParameter = periodID.HasValue ?
                new ObjectParameter("PeriodID", periodID) :
                new ObjectParameter("PeriodID", typeof(long));
    
            var accountParameter = account != null ?
                new ObjectParameter("Account", account) :
                new ObjectParameter("Account", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorksByAccount_Result>("GetWorksByAccount", periodIDParameter, accountParameter);
        }
    
        public virtual ObjectResult<GetWorksByPeriodID_Result> GetWorksByPeriodID(Nullable<long> periodID)
        {
            var periodIDParameter = periodID.HasValue ?
                new ObjectParameter("PeriodID", periodID) :
                new ObjectParameter("PeriodID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorksByPeriodID_Result>("GetWorksByPeriodID", periodIDParameter);
        }
    
        public virtual ObjectResult<GetWorksByWorksID_Result> GetWorksByWorksID(Nullable<long> worksID)
        {
            var worksIDParameter = worksID.HasValue ?
                new ObjectParameter("WorksID", worksID) :
                new ObjectParameter("WorksID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorksByWorksID_Result>("GetWorksByWorksID", worksIDParameter);
        }
    
        public virtual int GetWorksCheck(string worksName, Nullable<int> areaID, Nullable<int> schoolID, Nullable<int> stateID, Nullable<int> oneWorksTypeID, Nullable<int> twoWorksTypeID, string worksCode)
        {
            var worksNameParameter = worksName != null ?
                new ObjectParameter("WorksName", worksName) :
                new ObjectParameter("WorksName", typeof(string));
    
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("AreaID", areaID) :
                new ObjectParameter("AreaID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var oneWorksTypeIDParameter = oneWorksTypeID.HasValue ?
                new ObjectParameter("OneWorksTypeID", oneWorksTypeID) :
                new ObjectParameter("OneWorksTypeID", typeof(int));
    
            var twoWorksTypeIDParameter = twoWorksTypeID.HasValue ?
                new ObjectParameter("TwoWorksTypeID", twoWorksTypeID) :
                new ObjectParameter("TwoWorksTypeID", typeof(int));
    
            var worksCodeParameter = worksCode != null ?
                new ObjectParameter("WorksCode", worksCode) :
                new ObjectParameter("WorksCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetWorksCheck", worksNameParameter, areaIDParameter, schoolIDParameter, stateIDParameter, oneWorksTypeIDParameter, twoWorksTypeIDParameter, worksCodeParameter);
        }
    
        public virtual ObjectResult<GetWorksCommentsByWorksID_Result> GetWorksCommentsByWorksID(Nullable<long> worksID)
        {
            var worksIDParameter = worksID.HasValue ?
                new ObjectParameter("WorksID", worksID) :
                new ObjectParameter("WorksID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorksCommentsByWorksID_Result>("GetWorksCommentsByWorksID", worksIDParameter);
        }
    
        public virtual ObjectResult<GetWorksEvaluated_Result> GetWorksEvaluated(Nullable<long> worksID)
        {
            var worksIDParameter = worksID.HasValue ?
                new ObjectParameter("WorksID", worksID) :
                new ObjectParameter("WorksID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorksEvaluated_Result>("GetWorksEvaluated", worksIDParameter);
        }
    
        public virtual ObjectResult<GetWorksExpertByID_Result> GetWorksExpertByID(Nullable<long> worksExpertID)
        {
            var worksExpertIDParameter = worksExpertID.HasValue ?
                new ObjectParameter("WorksExpertID", worksExpertID) :
                new ObjectParameter("WorksExpertID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorksExpertByID_Result>("GetWorksExpertByID", worksExpertIDParameter);
        }
    
        public virtual ObjectResult<GetWorksExpertByWorksID_Result> GetWorksExpertByWorksID(Nullable<long> worksID)
        {
            var worksIDParameter = worksID.HasValue ?
                new ObjectParameter("WorksID", worksID) :
                new ObjectParameter("WorksID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorksExpertByWorksID_Result>("GetWorksExpertByWorksID", worksIDParameter);
        }
    
        public virtual ObjectResult<GetWorksFile_Result> GetWorksFile(Nullable<long> worksID, Nullable<int> type)
        {
            var worksIDParameter = worksID.HasValue ?
                new ObjectParameter("WorksID", worksID) :
                new ObjectParameter("WorksID", typeof(long));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorksFile_Result>("GetWorksFile", worksIDParameter, typeParameter);
        }
    
        public virtual int GetWorksForCheck(string worksName, Nullable<int> areaID, Nullable<int> schoolID, Nullable<int> stateID)
        {
            var worksNameParameter = worksName != null ?
                new ObjectParameter("WorksName", worksName) :
                new ObjectParameter("WorksName", typeof(string));
    
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("AreaID", areaID) :
                new ObjectParameter("AreaID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetWorksForCheck", worksNameParameter, areaIDParameter, schoolIDParameter, stateIDParameter);
        }
    
        public virtual ObjectResult<GetWorksForMeByPeriodID_Result> GetWorksForMeByPeriodID(Nullable<long> periodID, Nullable<long> userID)
        {
            var periodIDParameter = periodID.HasValue ?
                new ObjectParameter("PeriodID", periodID) :
                new ObjectParameter("PeriodID", typeof(long));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorksForMeByPeriodID_Result>("GetWorksForMeByPeriodID", periodIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<GetWorksForMeToScore_Result> GetWorksForMeToScore(string userAccount)
        {
            var userAccountParameter = userAccount != null ?
                new ObjectParameter("userAccount", userAccount) :
                new ObjectParameter("userAccount", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorksForMeToScore_Result>("GetWorksForMeToScore", userAccountParameter);
        }
    
        public virtual int GetWorksForSummary(Nullable<int> schoolID, Nullable<int> oneWorksTypeID, Nullable<int> twoWorksTypeID, Nullable<int> isSubmit)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var oneWorksTypeIDParameter = oneWorksTypeID.HasValue ?
                new ObjectParameter("OneWorksTypeID", oneWorksTypeID) :
                new ObjectParameter("OneWorksTypeID", typeof(int));
    
            var twoWorksTypeIDParameter = twoWorksTypeID.HasValue ?
                new ObjectParameter("TwoWorksTypeID", twoWorksTypeID) :
                new ObjectParameter("TwoWorksTypeID", typeof(int));
    
            var isSubmitParameter = isSubmit.HasValue ?
                new ObjectParameter("IsSubmit", isSubmit) :
                new ObjectParameter("IsSubmit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetWorksForSummary", schoolIDParameter, oneWorksTypeIDParameter, twoWorksTypeIDParameter, isSubmitParameter);
        }
    
        public virtual ObjectResult<GetWorksIDByPeriodIDAndUserID_Result> GetWorksIDByPeriodIDAndUserID(Nullable<long> userID, Nullable<long> periodID, Nullable<long> allotTimes)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(long));
    
            var periodIDParameter = periodID.HasValue ?
                new ObjectParameter("PeriodID", periodID) :
                new ObjectParameter("PeriodID", typeof(long));
    
            var allotTimesParameter = allotTimes.HasValue ?
                new ObjectParameter("allotTimes", allotTimes) :
                new ObjectParameter("allotTimes", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorksIDByPeriodIDAndUserID_Result>("GetWorksIDByPeriodIDAndUserID", userIDParameter, periodIDParameter, allotTimesParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> GetWorksIDByUserAccountAndPeriodTitle(Nullable<long> account, string periodTitle)
        {
            var accountParameter = account.HasValue ?
                new ObjectParameter("Account", account) :
                new ObjectParameter("Account", typeof(long));
    
            var periodTitleParameter = periodTitle != null ?
                new ObjectParameter("PeriodTitle", periodTitle) :
                new ObjectParameter("PeriodTitle", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("GetWorksIDByUserAccountAndPeriodTitle", accountParameter, periodTitleParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetWorksNumByPeriodID(Nullable<long> periodID)
        {
            var periodIDParameter = periodID.HasValue ?
                new ObjectParameter("PeriodID", periodID) :
                new ObjectParameter("PeriodID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetWorksNumByPeriodID", periodIDParameter);
        }
    
        public virtual int GetWorksPublic()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetWorksPublic");
        }
    
        public virtual ObjectResult<GetWorksSubmitByID_Result> GetWorksSubmitByID(Nullable<long> worksID)
        {
            var worksIDParameter = worksID.HasValue ?
                new ObjectParameter("WorksID", worksID) :
                new ObjectParameter("WorksID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorksSubmitByID_Result>("GetWorksSubmitByID", worksIDParameter);
        }
    
        public virtual ObjectResult<GetWorksToEvaluate_Result> GetWorksToEvaluate(Nullable<long> expertID, Nullable<long> periodID, Nullable<int> isSample)
        {
            var expertIDParameter = expertID.HasValue ?
                new ObjectParameter("ExpertID", expertID) :
                new ObjectParameter("ExpertID", typeof(long));
    
            var periodIDParameter = periodID.HasValue ?
                new ObjectParameter("PeriodID", periodID) :
                new ObjectParameter("PeriodID", typeof(long));
    
            var isSampleParameter = isSample.HasValue ?
                new ObjectParameter("IsSample", isSample) :
                new ObjectParameter("IsSample", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorksToEvaluate_Result>("GetWorksToEvaluate", expertIDParameter, periodIDParameter, isSampleParameter);
        }
    
        public virtual ObjectResult<GetWorksType_Result> GetWorksType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorksType_Result>("GetWorksType");
        }
    
        public virtual ObjectResult<GetWorksTypeByUserID_Result> GetWorksTypeByUserID(Nullable<long> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorksTypeByUserID_Result>("GetWorksTypeByUserID", userIDParameter);
        }
    
        public virtual ObjectResult<GetWorksTypeForEnroll_Result> GetWorksTypeForEnroll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorksTypeForEnroll_Result>("GetWorksTypeForEnroll");
        }
    
        public virtual ObjectResult<GetWorksTypeScoreStandardByTypeID_Result> GetWorksTypeScoreStandardByTypeID(Nullable<int> worksTypeID)
        {
            var worksTypeIDParameter = worksTypeID.HasValue ?
                new ObjectParameter("WorksTypeID", worksTypeID) :
                new ObjectParameter("WorksTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorksTypeScoreStandardByTypeID_Result>("GetWorksTypeScoreStandardByTypeID", worksTypeIDParameter);
        }
    
        public virtual int InsertUser(ObjectParameter userID, string account, string name, string iDCard, Nullable<bool> sex, string telephone, string email, string duty, string professionalTitle, string department, string major, string @class, string grade, Nullable<int> roleID, Nullable<int> schoolID, Nullable<long> createdBy, Nullable<System.DateTime> created, Nullable<long> modifiedBy, Nullable<System.DateTime> modified, Nullable<int> stateID, Nullable<long> approvedBy, Nullable<System.DateTime> approved, Nullable<long> flag, Nullable<int> orgID)
        {
            var accountParameter = account != null ?
                new ObjectParameter("Account", account) :
                new ObjectParameter("Account", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var iDCardParameter = iDCard != null ?
                new ObjectParameter("IDCard", iDCard) :
                new ObjectParameter("IDCard", typeof(string));
    
            var sexParameter = sex.HasValue ?
                new ObjectParameter("Sex", sex) :
                new ObjectParameter("Sex", typeof(bool));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var dutyParameter = duty != null ?
                new ObjectParameter("Duty", duty) :
                new ObjectParameter("Duty", typeof(string));
    
            var professionalTitleParameter = professionalTitle != null ?
                new ObjectParameter("ProfessionalTitle", professionalTitle) :
                new ObjectParameter("ProfessionalTitle", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var majorParameter = major != null ?
                new ObjectParameter("Major", major) :
                new ObjectParameter("Major", typeof(string));
    
            var classParameter = @class != null ?
                new ObjectParameter("Class", @class) :
                new ObjectParameter("Class", typeof(string));
    
            var gradeParameter = grade != null ?
                new ObjectParameter("Grade", grade) :
                new ObjectParameter("Grade", typeof(string));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdParameter = created.HasValue ?
                new ObjectParameter("Created", created) :
                new ObjectParameter("Created", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedParameter = modified.HasValue ?
                new ObjectParameter("Modified", modified) :
                new ObjectParameter("Modified", typeof(System.DateTime));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var approvedByParameter = approvedBy.HasValue ?
                new ObjectParameter("ApprovedBy", approvedBy) :
                new ObjectParameter("ApprovedBy", typeof(long));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(System.DateTime));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(long));
    
            var orgIDParameter = orgID.HasValue ?
                new ObjectParameter("OrgID", orgID) :
                new ObjectParameter("OrgID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUser", userID, accountParameter, nameParameter, iDCardParameter, sexParameter, telephoneParameter, emailParameter, dutyParameter, professionalTitleParameter, departmentParameter, majorParameter, classParameter, gradeParameter, roleIDParameter, schoolIDParameter, createdByParameter, createdParameter, modifiedByParameter, modifiedParameter, stateIDParameter, approvedByParameter, approvedParameter, flagParameter, orgIDParameter);
        }
    
        public virtual int InsertWorks(ObjectParameter worksID, string worksName, Nullable<int> worksTypeID, Nullable<long> periodID, string worksCode, Nullable<int> isSample, string submitProfile, string designIdeas, string keyPoints, string demoURL, Nullable<long> flag, Nullable<int> worksState, Nullable<float> score, Nullable<long> createdBy, Nullable<System.DateTime> created)
        {
            var worksNameParameter = worksName != null ?
                new ObjectParameter("WorksName", worksName) :
                new ObjectParameter("WorksName", typeof(string));
    
            var worksTypeIDParameter = worksTypeID.HasValue ?
                new ObjectParameter("WorksTypeID", worksTypeID) :
                new ObjectParameter("WorksTypeID", typeof(int));
    
            var periodIDParameter = periodID.HasValue ?
                new ObjectParameter("PeriodID", periodID) :
                new ObjectParameter("PeriodID", typeof(long));
    
            var worksCodeParameter = worksCode != null ?
                new ObjectParameter("WorksCode", worksCode) :
                new ObjectParameter("WorksCode", typeof(string));
    
            var isSampleParameter = isSample.HasValue ?
                new ObjectParameter("IsSample", isSample) :
                new ObjectParameter("IsSample", typeof(int));
    
            var submitProfileParameter = submitProfile != null ?
                new ObjectParameter("SubmitProfile", submitProfile) :
                new ObjectParameter("SubmitProfile", typeof(string));
    
            var designIdeasParameter = designIdeas != null ?
                new ObjectParameter("DesignIdeas", designIdeas) :
                new ObjectParameter("DesignIdeas", typeof(string));
    
            var keyPointsParameter = keyPoints != null ?
                new ObjectParameter("KeyPoints", keyPoints) :
                new ObjectParameter("KeyPoints", typeof(string));
    
            var demoURLParameter = demoURL != null ?
                new ObjectParameter("DemoURL", demoURL) :
                new ObjectParameter("DemoURL", typeof(string));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(long));
    
            var worksStateParameter = worksState.HasValue ?
                new ObjectParameter("WorksState", worksState) :
                new ObjectParameter("WorksState", typeof(int));
    
            var scoreParameter = score.HasValue ?
                new ObjectParameter("Score", score) :
                new ObjectParameter("Score", typeof(float));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdParameter = created.HasValue ?
                new ObjectParameter("Created", created) :
                new ObjectParameter("Created", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertWorks", worksID, worksNameParameter, worksTypeIDParameter, periodIDParameter, worksCodeParameter, isSampleParameter, submitProfileParameter, designIdeasParameter, keyPointsParameter, demoURLParameter, flagParameter, worksStateParameter, scoreParameter, createdByParameter, createdParameter);
        }
    
        public virtual int InsertWorksComments(ObjectParameter commentsID, Nullable<long> worksID, Nullable<long> userID, Nullable<long> flag)
        {
            var worksIDParameter = worksID.HasValue ?
                new ObjectParameter("WorksID", worksID) :
                new ObjectParameter("WorksID", typeof(long));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertWorksComments", commentsID, worksIDParameter, userIDParameter, flagParameter);
        }
    
        public virtual int InsertWorksExpert(ObjectParameter worksExpertID, Nullable<long> worksID, Nullable<long> expertID, Nullable<float> score, string comments, Nullable<System.DateTime> created, Nullable<int> scoreState, Nullable<long> flag)
        {
            var worksIDParameter = worksID.HasValue ?
                new ObjectParameter("WorksID", worksID) :
                new ObjectParameter("WorksID", typeof(long));
    
            var expertIDParameter = expertID.HasValue ?
                new ObjectParameter("ExpertID", expertID) :
                new ObjectParameter("ExpertID", typeof(long));
    
            var scoreParameter = score.HasValue ?
                new ObjectParameter("Score", score) :
                new ObjectParameter("Score", typeof(float));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var createdParameter = created.HasValue ?
                new ObjectParameter("Created", created) :
                new ObjectParameter("Created", typeof(System.DateTime));
    
            var scoreStateParameter = scoreState.HasValue ?
                new ObjectParameter("ScoreState", scoreState) :
                new ObjectParameter("ScoreState", typeof(int));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertWorksExpert", worksExpertID, worksIDParameter, expertIDParameter, scoreParameter, commentsParameter, createdParameter, scoreStateParameter, flagParameter);
        }
    
        public virtual int InsertWorksImages(ObjectParameter worksFileID, Nullable<long> worksID, Nullable<int> type, string fileName, string filePath, Nullable<int> fileSize, Nullable<long> createdBy, Nullable<System.DateTime> created, Nullable<long> flag)
        {
            var worksIDParameter = worksID.HasValue ?
                new ObjectParameter("WorksID", worksID) :
                new ObjectParameter("WorksID", typeof(long));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var fileSizeParameter = fileSize.HasValue ?
                new ObjectParameter("FileSize", fileSize) :
                new ObjectParameter("FileSize", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdParameter = created.HasValue ?
                new ObjectParameter("Created", created) :
                new ObjectParameter("Created", typeof(System.DateTime));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertWorksImages", worksFileID, worksIDParameter, typeParameter, fileNameParameter, filePathParameter, fileSizeParameter, createdByParameter, createdParameter, flagParameter);
        }
    
        public virtual int InsertWorksSubmit(ObjectParameter worksSubmitID, Nullable<long> worksID, string worksCode, string submitProfile, string suggestion, string installationGuide, string designIdeas, string keyPoints, string selfAssessment, string worksShow, string comment, string demoURL, Nullable<int> stateID, Nullable<long> createdBy, Nullable<System.DateTime> created, Nullable<long> flag)
        {
            var worksIDParameter = worksID.HasValue ?
                new ObjectParameter("WorksID", worksID) :
                new ObjectParameter("WorksID", typeof(long));
    
            var worksCodeParameter = worksCode != null ?
                new ObjectParameter("WorksCode", worksCode) :
                new ObjectParameter("WorksCode", typeof(string));
    
            var submitProfileParameter = submitProfile != null ?
                new ObjectParameter("SubmitProfile", submitProfile) :
                new ObjectParameter("SubmitProfile", typeof(string));
    
            var suggestionParameter = suggestion != null ?
                new ObjectParameter("Suggestion", suggestion) :
                new ObjectParameter("Suggestion", typeof(string));
    
            var installationGuideParameter = installationGuide != null ?
                new ObjectParameter("InstallationGuide", installationGuide) :
                new ObjectParameter("InstallationGuide", typeof(string));
    
            var designIdeasParameter = designIdeas != null ?
                new ObjectParameter("DesignIdeas", designIdeas) :
                new ObjectParameter("DesignIdeas", typeof(string));
    
            var keyPointsParameter = keyPoints != null ?
                new ObjectParameter("KeyPoints", keyPoints) :
                new ObjectParameter("KeyPoints", typeof(string));
    
            var selfAssessmentParameter = selfAssessment != null ?
                new ObjectParameter("SelfAssessment", selfAssessment) :
                new ObjectParameter("SelfAssessment", typeof(string));
    
            var worksShowParameter = worksShow != null ?
                new ObjectParameter("WorksShow", worksShow) :
                new ObjectParameter("WorksShow", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var demoURLParameter = demoURL != null ?
                new ObjectParameter("DemoURL", demoURL) :
                new ObjectParameter("DemoURL", typeof(string));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdParameter = created.HasValue ?
                new ObjectParameter("Created", created) :
                new ObjectParameter("Created", typeof(System.DateTime));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertWorksSubmit", worksSubmitID, worksIDParameter, worksCodeParameter, submitProfileParameter, suggestionParameter, installationGuideParameter, designIdeasParameter, keyPointsParameter, selfAssessmentParameter, worksShowParameter, commentParameter, demoURLParameter, stateIDParameter, createdByParameter, createdParameter, flagParameter);
        }
    
        public virtual int InsertWorksType(ObjectParameter worksTypeID, string worksTypeName, Nullable<int> parentID, Nullable<int> levelID, Nullable<long> createdBy, Nullable<System.DateTime> created, Nullable<int> flag, Nullable<int> f)
        {
            var worksTypeNameParameter = worksTypeName != null ?
                new ObjectParameter("WorksTypeName", worksTypeName) :
                new ObjectParameter("WorksTypeName", typeof(string));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var levelIDParameter = levelID.HasValue ?
                new ObjectParameter("LevelID", levelID) :
                new ObjectParameter("LevelID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdParameter = created.HasValue ?
                new ObjectParameter("Created", created) :
                new ObjectParameter("Created", typeof(System.DateTime));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(int));
    
            var fParameter = f.HasValue ?
                new ObjectParameter("F", f) :
                new ObjectParameter("F", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertWorksType", worksTypeID, worksTypeNameParameter, parentIDParameter, levelIDParameter, createdByParameter, createdParameter, flagParameter, fParameter);
        }
    
        public virtual int InsertWorksTypeScoreStandard(Nullable<int> workTypeID, Nullable<int> standardID, Nullable<int> score, string standardDescription, Nullable<int> flag)
        {
            var workTypeIDParameter = workTypeID.HasValue ?
                new ObjectParameter("WorkTypeID", workTypeID) :
                new ObjectParameter("WorkTypeID", typeof(int));
    
            var standardIDParameter = standardID.HasValue ?
                new ObjectParameter("StandardID", standardID) :
                new ObjectParameter("StandardID", typeof(int));
    
            var scoreParameter = score.HasValue ?
                new ObjectParameter("Score", score) :
                new ObjectParameter("Score", typeof(int));
    
            var standardDescriptionParameter = standardDescription != null ?
                new ObjectParameter("StandardDescription", standardDescription) :
                new ObjectParameter("StandardDescription", typeof(string));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertWorksTypeScoreStandard", workTypeIDParameter, standardIDParameter, scoreParameter, standardDescriptionParameter, flagParameter);
        }
    
        public virtual int JudgeWorksSubmit(Nullable<long> worksSubmitID, Nullable<int> stateID)
        {
            var worksSubmitIDParameter = worksSubmitID.HasValue ?
                new ObjectParameter("WorksSubmitID", worksSubmitID) :
                new ObjectParameter("WorksSubmitID", typeof(long));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JudgeWorksSubmit", worksSubmitIDParameter, stateIDParameter);
        }
    
        public virtual int UpdateUser(Nullable<long> userID, string account, string name, string iDCard, Nullable<bool> sex, string telephone, string email, string duty, string professionalTitle, string department, string major, string @class, string grade, Nullable<int> roleID, Nullable<int> schoolID, Nullable<long> createdBy, Nullable<System.DateTime> created, Nullable<long> modifiedBy, Nullable<System.DateTime> modified, Nullable<int> stateID, Nullable<long> approvedBy, Nullable<System.DateTime> approved, Nullable<long> flag, Nullable<int> orgID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var accountParameter = account != null ?
                new ObjectParameter("Account", account) :
                new ObjectParameter("Account", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var iDCardParameter = iDCard != null ?
                new ObjectParameter("IDCard", iDCard) :
                new ObjectParameter("IDCard", typeof(string));
    
            var sexParameter = sex.HasValue ?
                new ObjectParameter("Sex", sex) :
                new ObjectParameter("Sex", typeof(bool));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var dutyParameter = duty != null ?
                new ObjectParameter("Duty", duty) :
                new ObjectParameter("Duty", typeof(string));
    
            var professionalTitleParameter = professionalTitle != null ?
                new ObjectParameter("ProfessionalTitle", professionalTitle) :
                new ObjectParameter("ProfessionalTitle", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var majorParameter = major != null ?
                new ObjectParameter("Major", major) :
                new ObjectParameter("Major", typeof(string));
    
            var classParameter = @class != null ?
                new ObjectParameter("Class", @class) :
                new ObjectParameter("Class", typeof(string));
    
            var gradeParameter = grade != null ?
                new ObjectParameter("Grade", grade) :
                new ObjectParameter("Grade", typeof(string));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdParameter = created.HasValue ?
                new ObjectParameter("Created", created) :
                new ObjectParameter("Created", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedParameter = modified.HasValue ?
                new ObjectParameter("Modified", modified) :
                new ObjectParameter("Modified", typeof(System.DateTime));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var approvedByParameter = approvedBy.HasValue ?
                new ObjectParameter("ApprovedBy", approvedBy) :
                new ObjectParameter("ApprovedBy", typeof(long));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(System.DateTime));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(long));
    
            var orgIDParameter = orgID.HasValue ?
                new ObjectParameter("OrgID", orgID) :
                new ObjectParameter("OrgID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUser", userIDParameter, accountParameter, nameParameter, iDCardParameter, sexParameter, telephoneParameter, emailParameter, dutyParameter, professionalTitleParameter, departmentParameter, majorParameter, classParameter, gradeParameter, roleIDParameter, schoolIDParameter, createdByParameter, createdParameter, modifiedByParameter, modifiedParameter, stateIDParameter, approvedByParameter, approvedParameter, flagParameter, orgIDParameter);
        }
    
        public virtual int UpdateUserWorks(Nullable<long> userID, Nullable<long> worksID, Nullable<int> relationship, Nullable<int> flag)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var worksIDParameter = worksID.HasValue ?
                new ObjectParameter("WorksID", worksID) :
                new ObjectParameter("WorksID", typeof(long));
    
            var relationshipParameter = relationship.HasValue ?
                new ObjectParameter("Relationship", relationship) :
                new ObjectParameter("Relationship", typeof(int));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUserWorks", userIDParameter, worksIDParameter, relationshipParameter, flagParameter);
        }
    
        public virtual int UpdateWorksAllotTimes(Nullable<long> worksID, Nullable<long> allotTimes, Nullable<int> worksState)
        {
            var worksIDParameter = worksID.HasValue ?
                new ObjectParameter("WorksID", worksID) :
                new ObjectParameter("WorksID", typeof(long));
    
            var allotTimesParameter = allotTimes.HasValue ?
                new ObjectParameter("AllotTimes", allotTimes) :
                new ObjectParameter("AllotTimes", typeof(long));
    
            var worksStateParameter = worksState.HasValue ?
                new ObjectParameter("WorksState", worksState) :
                new ObjectParameter("WorksState", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateWorksAllotTimes", worksIDParameter, allotTimesParameter, worksStateParameter);
        }
    
        public virtual int UpdateWorksCheck(Nullable<long> worksSubmitID, Nullable<int> stateID, Nullable<long> approvedBy, Nullable<System.DateTime> approved, string backReason)
        {
            var worksSubmitIDParameter = worksSubmitID.HasValue ?
                new ObjectParameter("WorksSubmitID", worksSubmitID) :
                new ObjectParameter("WorksSubmitID", typeof(long));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var approvedByParameter = approvedBy.HasValue ?
                new ObjectParameter("ApprovedBy", approvedBy) :
                new ObjectParameter("ApprovedBy", typeof(long));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(System.DateTime));
    
            var backReasonParameter = backReason != null ?
                new ObjectParameter("BackReason", backReason) :
                new ObjectParameter("BackReason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateWorksCheck", worksSubmitIDParameter, stateIDParameter, approvedByParameter, approvedParameter, backReasonParameter);
        }
    
        public virtual int UpdateWorksCode(Nullable<long> worksID, string submitProfile, string designIdeas, string keyPoints, string demoURL, string worksCode)
        {
            var worksIDParameter = worksID.HasValue ?
                new ObjectParameter("WorksID", worksID) :
                new ObjectParameter("WorksID", typeof(long));
    
            var submitProfileParameter = submitProfile != null ?
                new ObjectParameter("SubmitProfile", submitProfile) :
                new ObjectParameter("SubmitProfile", typeof(string));
    
            var designIdeasParameter = designIdeas != null ?
                new ObjectParameter("DesignIdeas", designIdeas) :
                new ObjectParameter("DesignIdeas", typeof(string));
    
            var keyPointsParameter = keyPoints != null ?
                new ObjectParameter("KeyPoints", keyPoints) :
                new ObjectParameter("KeyPoints", typeof(string));
    
            var demoURLParameter = demoURL != null ?
                new ObjectParameter("DemoURL", demoURL) :
                new ObjectParameter("DemoURL", typeof(string));
    
            var worksCodeParameter = worksCode != null ?
                new ObjectParameter("WorksCode", worksCode) :
                new ObjectParameter("WorksCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateWorksCode", worksIDParameter, submitProfileParameter, designIdeasParameter, keyPointsParameter, demoURLParameter, worksCodeParameter);
        }
    
        public virtual int UpdateWorksExpert(Nullable<long> worksExpertID, Nullable<long> worksID, Nullable<long> expertID, Nullable<float> score, string comments, Nullable<System.DateTime> modified, Nullable<long> flag)
        {
            var worksExpertIDParameter = worksExpertID.HasValue ?
                new ObjectParameter("WorksExpertID", worksExpertID) :
                new ObjectParameter("WorksExpertID", typeof(long));
    
            var worksIDParameter = worksID.HasValue ?
                new ObjectParameter("WorksID", worksID) :
                new ObjectParameter("WorksID", typeof(long));
    
            var expertIDParameter = expertID.HasValue ?
                new ObjectParameter("ExpertID", expertID) :
                new ObjectParameter("ExpertID", typeof(long));
    
            var scoreParameter = score.HasValue ?
                new ObjectParameter("Score", score) :
                new ObjectParameter("Score", typeof(float));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var modifiedParameter = modified.HasValue ?
                new ObjectParameter("Modified", modified) :
                new ObjectParameter("Modified", typeof(System.DateTime));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateWorksExpert", worksExpertIDParameter, worksIDParameter, expertIDParameter, scoreParameter, commentsParameter, modifiedParameter, flagParameter);
        }
    
        public virtual int UpdateWorksFile(Nullable<long> worksFileID, Nullable<int> type, string fileName, Nullable<long> modifiedBy, Nullable<System.DateTime> modified, string filePath, Nullable<int> fileSize, Nullable<long> flag)
        {
            var worksFileIDParameter = worksFileID.HasValue ?
                new ObjectParameter("WorksFileID", worksFileID) :
                new ObjectParameter("WorksFileID", typeof(long));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedParameter = modified.HasValue ?
                new ObjectParameter("Modified", modified) :
                new ObjectParameter("Modified", typeof(System.DateTime));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var fileSizeParameter = fileSize.HasValue ?
                new ObjectParameter("FileSize", fileSize) :
                new ObjectParameter("FileSize", typeof(int));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateWorksFile", worksFileIDParameter, typeParameter, fileNameParameter, modifiedByParameter, modifiedParameter, filePathParameter, fileSizeParameter, flagParameter);
        }
    
        public virtual int UpdateWorksFileForSize(Nullable<long> worksFileID, Nullable<int> type, string fileName, Nullable<long> modifiedBy, Nullable<System.DateTime> modified, string filePath, Nullable<int> fileSize, Nullable<long> flag)
        {
            var worksFileIDParameter = worksFileID.HasValue ?
                new ObjectParameter("WorksFileID", worksFileID) :
                new ObjectParameter("WorksFileID", typeof(long));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedParameter = modified.HasValue ?
                new ObjectParameter("Modified", modified) :
                new ObjectParameter("Modified", typeof(System.DateTime));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var fileSizeParameter = fileSize.HasValue ?
                new ObjectParameter("FileSize", fileSize) :
                new ObjectParameter("FileSize", typeof(int));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateWorksFileForSize", worksFileIDParameter, typeParameter, fileNameParameter, modifiedByParameter, modifiedParameter, filePathParameter, fileSizeParameter, flagParameter);
        }
    
        public virtual int UpdateWorksImages(Nullable<long> worksImagesID, Nullable<long> modifiedBy, Nullable<System.DateTime> modified)
        {
            var worksImagesIDParameter = worksImagesID.HasValue ?
                new ObjectParameter("WorksImagesID", worksImagesID) :
                new ObjectParameter("WorksImagesID", typeof(long));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedParameter = modified.HasValue ?
                new ObjectParameter("Modified", modified) :
                new ObjectParameter("Modified", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateWorksImages", worksImagesIDParameter, modifiedByParameter, modifiedParameter);
        }
    
        public virtual int UpdateWorksInfo(Nullable<long> worksID, string worksName, Nullable<int> worksTypeID, string worksCode, string members, Nullable<long> periodID, string submitProfile, string designIdeas, string keyPoints, string demoURL, Nullable<long> flag, Nullable<int> worksState, Nullable<float> score, Nullable<long> createdBy, Nullable<System.DateTime> created)
        {
            var worksIDParameter = worksID.HasValue ?
                new ObjectParameter("WorksID", worksID) :
                new ObjectParameter("WorksID", typeof(long));
    
            var worksNameParameter = worksName != null ?
                new ObjectParameter("WorksName", worksName) :
                new ObjectParameter("WorksName", typeof(string));
    
            var worksTypeIDParameter = worksTypeID.HasValue ?
                new ObjectParameter("WorksTypeID", worksTypeID) :
                new ObjectParameter("WorksTypeID", typeof(int));
    
            var worksCodeParameter = worksCode != null ?
                new ObjectParameter("WorksCode", worksCode) :
                new ObjectParameter("WorksCode", typeof(string));
    
            var membersParameter = members != null ?
                new ObjectParameter("Members", members) :
                new ObjectParameter("Members", typeof(string));
    
            var periodIDParameter = periodID.HasValue ?
                new ObjectParameter("PeriodID", periodID) :
                new ObjectParameter("PeriodID", typeof(long));
    
            var submitProfileParameter = submitProfile != null ?
                new ObjectParameter("SubmitProfile", submitProfile) :
                new ObjectParameter("SubmitProfile", typeof(string));
    
            var designIdeasParameter = designIdeas != null ?
                new ObjectParameter("DesignIdeas", designIdeas) :
                new ObjectParameter("DesignIdeas", typeof(string));
    
            var keyPointsParameter = keyPoints != null ?
                new ObjectParameter("KeyPoints", keyPoints) :
                new ObjectParameter("KeyPoints", typeof(string));
    
            var demoURLParameter = demoURL != null ?
                new ObjectParameter("DemoURL", demoURL) :
                new ObjectParameter("DemoURL", typeof(string));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(long));
    
            var worksStateParameter = worksState.HasValue ?
                new ObjectParameter("WorksState", worksState) :
                new ObjectParameter("WorksState", typeof(int));
    
            var scoreParameter = score.HasValue ?
                new ObjectParameter("Score", score) :
                new ObjectParameter("Score", typeof(float));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdParameter = created.HasValue ?
                new ObjectParameter("Created", created) :
                new ObjectParameter("Created", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateWorksInfo", worksIDParameter, worksNameParameter, worksTypeIDParameter, worksCodeParameter, membersParameter, periodIDParameter, submitProfileParameter, designIdeasParameter, keyPointsParameter, demoURLParameter, flagParameter, worksStateParameter, scoreParameter, createdByParameter, createdParameter);
        }
    
        public virtual int UpdateWorksSubmit(Nullable<long> worksID, Nullable<float> score, Nullable<int> worksState)
        {
            var worksIDParameter = worksID.HasValue ?
                new ObjectParameter("WorksID", worksID) :
                new ObjectParameter("WorksID", typeof(long));
    
            var scoreParameter = score.HasValue ?
                new ObjectParameter("Score", score) :
                new ObjectParameter("Score", typeof(float));
    
            var worksStateParameter = worksState.HasValue ?
                new ObjectParameter("WorksState", worksState) :
                new ObjectParameter("WorksState", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateWorksSubmit", worksIDParameter, scoreParameter, worksStateParameter);
        }
    
        public virtual int UpdateWorksType(Nullable<int> worksTypeID, string worksTypeName, Nullable<int> parentID, Nullable<int> levelID, Nullable<long> createdBy, Nullable<System.DateTime> created, Nullable<int> flag, Nullable<int> f)
        {
            var worksTypeIDParameter = worksTypeID.HasValue ?
                new ObjectParameter("WorksTypeID", worksTypeID) :
                new ObjectParameter("WorksTypeID", typeof(int));
    
            var worksTypeNameParameter = worksTypeName != null ?
                new ObjectParameter("WorksTypeName", worksTypeName) :
                new ObjectParameter("WorksTypeName", typeof(string));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var levelIDParameter = levelID.HasValue ?
                new ObjectParameter("LevelID", levelID) :
                new ObjectParameter("LevelID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdParameter = created.HasValue ?
                new ObjectParameter("Created", created) :
                new ObjectParameter("Created", typeof(System.DateTime));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(int));
    
            var fParameter = f.HasValue ?
                new ObjectParameter("F", f) :
                new ObjectParameter("F", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateWorksType", worksTypeIDParameter, worksTypeNameParameter, parentIDParameter, levelIDParameter, createdByParameter, createdParameter, flagParameter, fParameter);
        }
    
        public virtual int UpdateWorksTypeForSubmit(Nullable<long> worksID, Nullable<int> worksTypeID, Nullable<long> modifiedBy, Nullable<System.DateTime> modified)
        {
            var worksIDParameter = worksID.HasValue ?
                new ObjectParameter("WorksID", worksID) :
                new ObjectParameter("WorksID", typeof(long));
    
            var worksTypeIDParameter = worksTypeID.HasValue ?
                new ObjectParameter("WorksTypeID", worksTypeID) :
                new ObjectParameter("WorksTypeID", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedParameter = modified.HasValue ?
                new ObjectParameter("Modified", modified) :
                new ObjectParameter("Modified", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateWorksTypeForSubmit", worksIDParameter, worksTypeIDParameter, modifiedByParameter, modifiedParameter);
        }
    
        public virtual int UpdateWorksTypeScoreStandard(Nullable<int> workTypeID, Nullable<int> standardID, Nullable<int> score, string standardDescription, Nullable<int> flag)
        {
            var workTypeIDParameter = workTypeID.HasValue ?
                new ObjectParameter("WorkTypeID", workTypeID) :
                new ObjectParameter("WorkTypeID", typeof(int));
    
            var standardIDParameter = standardID.HasValue ?
                new ObjectParameter("StandardID", standardID) :
                new ObjectParameter("StandardID", typeof(int));
    
            var scoreParameter = score.HasValue ?
                new ObjectParameter("Score", score) :
                new ObjectParameter("Score", typeof(int));
    
            var standardDescriptionParameter = standardDescription != null ?
                new ObjectParameter("StandardDescription", standardDescription) :
                new ObjectParameter("StandardDescription", typeof(string));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateWorksTypeScoreStandard", workTypeIDParameter, standardIDParameter, scoreParameter, standardDescriptionParameter, flagParameter);
        }
    }
}
